// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using noteCodeAPI.Tools;

#nullable disable

namespace noteCodeAPI.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20230803235926_remove_waiting_users_and_add_isValid_to_users")]
    partial class removewaitingusersandaddisValidtousers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CodetagNote", b =>
                {
                    b.Property<int>("CodetagsId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.Property<int>("NotesId")
                        .HasColumnType("int")
                        .HasColumnName("note_id");

                    b.HasKey("CodetagsId", "NotesId");

                    b.HasIndex("NotesId");

                    b.ToTable("notes_tags", (string)null);
                });

            modelBuilder.Entity("noteCodeAPI.Models.CodeSnippet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("language");

                    b.Property<int>("NoteId")
                        .HasColumnType("int")
                        .HasColumnName("note_id");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.ToTable("code_snippets");
                });

            modelBuilder.Entity("noteCodeAPI.Models.Codetag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("codetags");
                });

            modelBuilder.Entity("noteCodeAPI.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("noteCodeAPI.Models.UnusedActiveToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date");

                    b.Property<string>("JwtToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.ToTable("unused_active_tokens");
                });

            modelBuilder.Entity("noteCodeAPI.Models.UserApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit")
                        .HasColumnName("is_valid");

                    b.Property<string>("PasswordHashed")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hashed");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_salt");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("CodetagNote", b =>
                {
                    b.HasOne("noteCodeAPI.Models.Codetag", null)
                        .WithMany()
                        .HasForeignKey("CodetagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("noteCodeAPI.Models.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("noteCodeAPI.Models.CodeSnippet", b =>
                {
                    b.HasOne("noteCodeAPI.Models.Note", "Note")
                        .WithMany("Codes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("noteCodeAPI.Models.Note", b =>
                {
                    b.HasOne("noteCodeAPI.Models.UserApp", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("noteCodeAPI.Models.Note", b =>
                {
                    b.Navigation("Codes");
                });

            modelBuilder.Entity("noteCodeAPI.Models.UserApp", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
